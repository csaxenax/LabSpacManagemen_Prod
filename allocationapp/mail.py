import smtplib, ssl
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import traceback
from django.db.models import Q
from . models import UserModel,ApproverUserModel

SMTP_SERVER = "Smtpauth.intel.com"
PORT = 587
USERNAME = "sys_toolscps"
PASSWORD = "intel@123456789012345"
context = ssl.create_default_context()

#https://sivindicator.intel.com/workbench/#/home

#https://ilam.intel.com/#/home

def SendEmail(From: str ,To: list, Cc: list, Subject: str, Message: str):
    msg = MIMEMultipart('alternative')
    msg['Subject'] = Subject
    msg['From'] = From
    msg['To'] = ",".join(To)
    if len(Cc)>=1:
        reciepients = list(set(To+Cc))
        msg['Cc'] = ",".join(Cc)
    else:
        reciepients = To
    context = ssl.create_default_context()
    try:
        server = smtplib.SMTP(SMTP_SERVER,PORT)
        server.ehlo()
        server.starttls(context=context)
        server.ehlo()
        server.login(USERNAME,PASSWORD)
        actual_message = MIMEText(Message,'html')
        msg.attach(actual_message)
        server.sendmail(From,reciepients,msg.as_string())
        print("Successfully sent mail")
    except Exception:
        print(traceback.format_exc())
    
def BroadCastEmail(From: str ,To: list, Cc: list,Bcc: list, Subject: str, Message: str):
    msg = MIMEMultipart('alternative')
    msg['Subject'] = Subject
    msg['From'] = From
    msg['To'] = ",".join(To)
    if len(Cc) >= 1:
        msg['Cc'] = ", ".join(Cc)
    if len(Bcc) >= 1:
        msg['Bcc'] = ", ".join(Bcc)

    # Combine To, Cc, and Bcc recipients into a single list
    recipients = To + Cc + Bcc
        
    context = ssl.create_default_context()
    try:
        server = smtplib.SMTP(SMTP_SERVER,PORT)
        server.ehlo()
        server.starttls(context=context)
        server.ehlo()
        server.login(USERNAME,PASSWORD)
        actual_message = MIMEText(Message,'html')
        msg.attach(actual_message)
        server.sendmail(From,recipients,msg.as_string())
        print("Successfully sent mail")
    except Exception:
        print(traceback.format_exc())

Bench_html_text = """
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {{
  border:0px solid black;
  text-align:centre;
}}
</style>
</head>
<body>
<img src="https://sivindicator.intel.com/IMG/LAB.png" alt="LabSpaceManagement" width="800" height="70">
<p text-align:center font-size:8px font-family:Verdana><i>This message auto generated by <i><a href="https://ilam.intel.com/#/home" target='_blank'>Lab Space Management</a></p>

<p font-size:10px font-family:Intel Clear>Hi {User} ( WWID No. {WWID})</p>
<p font-size:10px font-family:Intel Clear>{message} at {LabName}. ( RequestId:{id} )  </p>
<P>
<table  bordercolor="solid black" border="1"  cellpadding="5" width="800" 
                            style ='border-collapse:collapse;'>
<tr>
<th>Sl.No</th>
<th>Title</th>
<th>Description</th>
</tr>
<tr>
<td><b>1</b>
<td>Location</td>
<td>{lab_name}</td>
</tr>
<tr>
<td>2</td>
<td>Team</td>
<td>{team}</td>
</tr>
<tr>
<td>3</td>
<td>Number Of Benches</td>
<td>{number_of_benches}</td>
</tr>
<tr>
<td>4</td>
<td>Program</td>
<td>{program_name}</td>
</tr>
<tr>
<td>5</td>
<td>SKU</td>
<td>{sku}</td>
</tr>

<tr>
<td>6</td>
<td>Vendor</td>
<td>{vendor_name}</td>
</tr>

<tr>
<td>7</td>
<td>From Workweek</td>
<td>{from_ww}</td>
</tr>

<tr>
<td>8</td>
<td>To Workweek</td>
<td>{to_ww}</td>
</tr>

<tr>
<td>9</td>
<td>Duration</td>
<td>{duration}</td>
</tr>

<tr>
<td>10</td>
<td>Allocated To</td>
<td>{allocatedto}</td>
</tr>

<tr>
<td>11</td>
<td>Notify To</td>
<td>{notifyto}</td>
</tr>

<tr>
<td>10</td>
<td>RequestedBy</td>
<td>{requestedBy}</td>
</tr>

<tr>
<td>12</td>
<td>Benches</td>
<td>{bench_data}</td>
</tr>

<tr>
<td>13</td>
<td>Deallocated By</td>
<td>{deallocatedby}</td>
</tr>

<tr>
<td>14</td>
<td>Remarks</td>
<td>{remarks}</td>
</tr>

</table>
</P>
<br/>
<p>Intel reserves the right to take disciplinary action to ensure compliance with its policies & processes . At all times, follow Intel’s Lab guideline and No adherence to  its policies will result in disciplinary action, including but not limited to termination. </p>
<br />
<p><b>Thank you.<b></p>
<p font-color:red><b>PLEASE DO NOT REPLY TO THIS MESSAGE</b></p>
</body>
</html>
"""

Bench_Expiry_html_text = """
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {{
  border:0px solid black;
  text-align:centre;
}}
</style>
</head>
<body>
<img src="https://sivindicator.intel.com/IMG/LAB.png" alt="LabSpaceManagement" width="800" height="70">
<p text-align:center font-size:8px font-family:Verdana><i>This message auto generated by <i><a href="https://ilam.intel.com/#/home" target='_blank'>Lab Space Management</a></p>

<p font-size:10px font-family:Intel Clear>Hi {User} ( WWID No. {WWID})</p>
<p font-size:10px font-family:Intel Clear>{message} at {LabName}. ( RequestId:{id} )  </p>
<p font-size:10px font-family:Intel Clear>Click here to  <a href="https://ilam.intel.com/workbench/#/allocation?id={id}" target='_blank'>Extend</a></p>
<P>
<table  bordercolor="solid black" border="1"  cellpadding="5" width="800" 
                            style ='border-collapse:collapse;'>
<tr>
<th>Sl.No</th>
<th>Title</th>
<th>Description</th>
</tr>
<tr>
<td><b>1</b>
<td>Location</td>
<td>{lab_name}</td>
</tr>
<tr>
<td>2</td>
<td>Team</td>
<td>{team}</td>
</tr>
<tr>
<td>3</td>
<td>Number Of Benches</td>
<td>{number_of_benches}</td>
</tr>
<tr>
<td>4</td>
<td>Program</td>
<td>{program_name}</td>
</tr>
<tr>
<td>5</td>
<td>SKU</td>
<td>{sku}</td>
</tr>

<tr>
<td>6</td>
<td>Vendor</td>
<td>{vendor_name}</td>
</tr>

<tr>
<td>7</td>
<td>From Workweek</td>
<td>{from_ww}</td>
</tr>

<tr>
<td>8</td>
<td>To Workweek</td>
<td>{to_ww}</td>
</tr>

<tr>
<td>9</td>
<td>Duration</td>
<td>{duration}</td>
</tr>

<tr>
<td>10</td>
<td>Allocated To</td>
<td>{allocatedto}</td>
</tr>

<tr>
<td>11</td>
<td>Notify To</td>
<td>{notifyto}</td>
</tr>

<tr>
<td>12</td>
<td>Benches</td>
<td>{bench_data}</td>
</tr>

<tr>
<td>13</td>
<td>Remarks</td>
<td>{remarks}</td>
</tr>

</table>
</P>
<br/>
<p>Intel reserves the right to take disciplinary action to ensure compliance with its policies & processes . At all times, follow Intel’s Lab guideline and No adherence to  its policies will result in disciplinary action, including but not limited to termination. </p>
<br />
<p><b>Thank you.<b></p>
<p font-color:red><b>PLEASE DO NOT REPLY TO THIS MESSAGE</b></p>
</body>
</html>
"""

User_html_text = """
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {{
  border:0px solid black;
  text-align:centre;
}}
</style>
</head>
<body>
<img src="https://sivindicator.intel.com/IMG/LAB.png" alt="LabSpaceManagement" width="800" height="70">
<p text-align:center font-size:8px font-family:Verdana><i>This message auto generated by <i><a href="https://ilam.intel.com/#/home" target='_blank'>Lab Space Management</a></p>

<p font-size:10px font-family:Intel Clear>Hi {User} ( WWID No. {WWID})</p>
<p font-size:10px font-family:Intel Clear>{message} with ( RequestId:{id} )  </p>
<P>
<table  bordercolor="solid black" border="1"  cellpadding="5" width="800" 
                            style ='border-collapse:collapse;'>
<tr>
<th>Sl.No</th>
<th>Title</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td>WWID</td>
<td>{WWID}</td>
</tr>
<tr>
<td>2</td>
<td>Name</td>
<td>{Name}</td>
</tr>
<tr>
<td>3</td>
<td>Email</td>
<td>{Email}</td>
</tr>
<tr>
<td>4</td>
<td>Role</td>
<td>{Role}</td>
</tr>

</table>
</P>
<br/>
<p>Intel reserves the right to take disciplinary action to ensure compliance with its policies & processes . At all times, follow Intel’s Lab guideline and No adherence to  its policies will result in disciplinary action, including but not limited to termination. </p>
<br />
<p><b>Thank you.<b></p>
<p font-color:red><b>PLEASE DO NOT REPLY TO THIS MESSAGE</b></p>
</body>
</html>
"""

suggestion_html_text = """
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {{
  border:0px solid black;
  text-align:centre;
}}
</style>
</head>
<body>
<img src="https://sivindicator.intel.com/IMG/LAB.png" alt="LabSpaceManagement" width="800" height="70">
<p text-align:center font-size:8px font-family:Verdana><i>This message auto generated by <i><a href="https://ilam.intel.com/#/home" target='_blank'>Lab Space Management</a></p>
<p font-size:10px font-family:Intel Clear>Hi {User} ( WWID No. {WWID})</p>
<p font-size:10px font-family:Intel Clear>{message} </p>
<br/>
<p style = "font-weight:bold">Intel reserves the right to take disciplinary action to ensure compliance with its policies & processes . At all times, follow Intel’s Lab guideline and No adherence to  its policies will result in disciplinary action, including but not limited to termination.</p>
<br />
<p><b>Thank you.<b></p>
<p font-color:red><b>PLEASE DO NOT REPLY TO THIS MESSAGE</b></p>
</body>
</html>
"""

broadcast_html_text = """
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {{
  border:0px solid black;
  text-align:centre;
}}
</style>
</head>
<body>
<img src="https://sivindicator.intel.com/IMG/LAB.png" alt="LabSpaceManagement" width="800" height="70">
<p text-align:center font-size:8px font-family:Verdana><i>This message auto generated by <i><a href="https://ilam.intel.com/#/home" target='_blank'>Lab Space Management</a></p>
<p font-size:10px font-family:Intel Clear>Hi {User} ( WWID No. {WWID})</p>
<p font-size:10px font-family:Intel Clear>{content} </p>
<br/>
<br />
<p><b>Thank you.<b></p>
<p font-color:red><b>PLEASE DO NOT REPLY TO THIS MESSAGE</b></p>
</body>
</html>
"""

class Email:
    def __init__(self,From,To,Cc,data):
        self.From = From # input should be in String format
        self.Cc = Cc # input should be in List format
        self.To = To
        self.data = data        

    def sendmail(self):
        # Requester+notifyTo need to be in CC , Approver in To, Admin in Bcc
        Subject = self.data['subject'] + str(self.data['User']) + " WWID No."  + str(self.data['WWID'])
        From = self.From
        ccs = self.Cc
        cc_query = ApproverUserModel.objects.filter().values('Email')
        cc_list = [each_query['Email'] for each_query in cc_query]
        CC = cc_list 
        CC += ccs
        CC = list(set(CC))
        TO = self.To
        
        #mail_reciepients = self.To + self.Cc.split(',')
        #print("Reciepients",mail_reciepients)
        try:
            id = self.data['id']
            User = self.data['User']
            WWID = self.data['WWID']
            message = self.data['message']
            program = self.data['program']
            sku = self.data['sku']
            labname = self.data['lab_name']
            vendor = self.data['vendor']
            allocatedto = self.data['allocatedto']
            notifyto = self.data['notifyto']
            fromww = str(self.data['fromww'])[0:2] + '-' + str(self.data['fromww'])[2:]
            toww = str(self.data['toww'])[0:2] + '-' + str(self.data['toww'])[2:]
            duration = self.data['duration']
            remarks = self.data['remarks']
            team = self.data['team']
            number_of_benches = self.data['numberofbenches']
            requestedBy = self.data['requestedBy']
            deallocatedby = self.data['deallocatedby']
            bench_data = ",".join(self.data['bench_data'])
            final_message = Bench_html_text.format(LabName=labname, User=User,WWID=WWID,message=message,program_name=program,sku=sku,
                                 lab_name=labname,vendor_name=vendor,allocatedto=allocatedto,
                                 from_ww=fromww,to_ww=toww,remarks=remarks,duration=duration,number_of_benches=number_of_benches,
                                 bench_data=bench_data,team=team,id=id,notifyto=notifyto,requestedBy=requestedBy,deallocatedby=deallocatedby)
            SendEmail(From ,TO, CC, Subject,final_message)
        except Exception as e:
            print(e)
            print(traceback.format_exc())
            print("Error Unable to send mail")

class UserModuleMail:
    def __init__(self,From,To,CC,data):
        self.From = From
        self.Cc = CC
        self.To = To
        self.data = data

    def sendmail(self):
        Subject = self.data['subject'] + str(self.data['User']) + " WWID No."  + str(self.data['WWID'])
        From = self.From
        cc_query = ApproverUserModel.objects.filter().values('Email')
        cc_list = [each_query['Email'] for each_query in cc_query]
        CC = cc_list
        CC = list(set(CC))
        TO = self.To
        User = self.data['User']
        WWID = self.data['WWID']
        Name = self.data['Name']
        Email = self.data['Email']
        Role = self.data['Role']
        message = self.data['message']
        id = self.data['id']
        final_message = User_html_text.format(User=User,WWID=WWID,Name=Name,
                                            Email=Email,Role=Role,
                                            message=message,id=id)
        try:
            SendEmail(From ,TO,CC ,Subject, final_message)
        except Exception as e:
            print(traceback.format_exc())

class SuggestionsMail:
    def __init__(self,From,To,CC,data):
        self.From = From
        self.CC=CC
        self.To = To
        self.data = data

    def sendmail(self):
        Subject = self.data['subject'] + str(self.data['User']) + " WWID No."  + str(self.data['WWID'])
        From = self.From
        cc_query = ApproverUserModel.objects.filter().values('Email')
        cc_list = [each_query['Email'] for each_query in cc_query]
        CC = cc_list
        CC = list(set(CC))
        TO = self.To
        User = self.data['User']
        WWID = self.data['WWID']
        message = self.data['message']
        id = self.data['id']
        final_message = suggestion_html_text.format(User=User,WWID=WWID,
                                            message=message,id=id)
        try:
            SendEmail(From ,TO,CC ,Subject, final_message)
        except Exception as e:
            print(traceback.format_exc())

class BroadcastMail:
    def __init__(self,From,To,CC,Bcc,data):
        self.From = From
        self.CC=CC
        self.To = To
        self.data = data
        self.Bcc = Bcc

    def sendmail(self):
        Subject = self.data['subject'] + str(self.data['User']) + " WWID No."  + str(self.data['WWID'])
        From = self.From
        cc_query = ApproverUserModel.objects.filter().values('Email')
        cc_list = [each_query['Email'] for each_query in cc_query]
        CC = cc_list
        CC = list(set(CC))
        TO = self.To
        Bcc = self.Bcc
        User = self.data['User']
        WWID = self.data['WWID']
        content = self.data['content']
        # id = self.data['id']
        final_message = broadcast_html_text.format(User=User,WWID=WWID,
                                                   content=content)
        print(From)
        print(TO)
        print(CC)
        print(Bcc)
        print(final_message)
        try:
            # Ensure Cc and Bcc are lists
            if not CC:
                CC = []
            if not Bcc:
                Bcc = []

            # Send the email with CC and Bcc recipients
            BroadCastEmail(From, self.To, CC, Bcc, Subject, final_message)
        except Exception as e:
            print(traceback.format_exc())


class ExpiryEmail:
    def __init__(self,From, To ,Cc, data):
        self.From = From # input should be in String format
        self.To = To # input should be in List format
        self.Cc = Cc # input should be in List format
        self.data = data

    def sendmail(self):
        Subject = self.data['subject'] + str(self.data['User']) + " WWID No."  + str(self.data['WWID'])
        From = self.From
        cc_query = ApproverUserModel.objects.filter().values('Email')
        cc_list = [each_query['Email'] for each_query in cc_query]
        CC = self.Cc+cc_list
        CC = list(set(CC))
        TO = self.To
        #mail_reciepients = self.To + self.Cc.split(',')
        #print("Reciepients",mail_reciepients)
        try:
            id = self.data['id']
            User = self.data['User']
            WWID = self.data['WWID']
            message = self.data['message']
            program = self.data['program']
            sku = self.data['sku']
            labname = self.data['lab_name']
            vendor = self.data['vendor']
            allocatedto = self.data['allocatedto']
            notifyto = self.data['notifyto']
            fromww = str(self.data['fromww'])[0:2] + '-' + str(self.data['fromww'])[2:]
            toww = str(self.data['toww'])[0:2] + '-' + str(self.data['toww'])[2:]
            duration = self.data['duration']
            remarks = self.data['remarks']
            team = self.data['team']
            number_of_benches = self.data['numberofbenches']
            bench_data = ",".join(self.data['bench_data'])
            final_message = Bench_Expiry_html_text.format(LabName=labname, User=User,WWID=WWID,message=message,program_name=program,sku=sku,
                                 lab_name=labname,vendor_name=vendor,allocatedto=allocatedto,
                                 from_ww=fromww,to_ww=toww,remarks=remarks,duration=duration,number_of_benches=number_of_benches,
                                 bench_data=bench_data,team=team,id=id,notifyto=notifyto)
            SendEmail(From ,TO, CC, Subject, final_message)
        except Exception as e:
            print(e)
            print(traceback.format_exc())
            print("Error Unable to send mail")


# class ReportEmail:
#     def __init__(self,From, To ,Cc, data):
#         self.From = From # input should be in String format
#         self.To = To # input should be in List format
#         self.Cc = Cc # input should be in List format
#         self.data = data

#     def sendmail(self):
#         Subject = self.data['subject'] + str(self.data['User']) + " WWID No."  + str(self.data['WWID'])
#         From = self.From
#         cc_query = ApproverUserModel.objects.filter().values('Email')
#         cc_list = [each_query['Email'] for each_query in cc_query]
#         CC = self.Cc+cc_list
#         CC = list(set(CC))
#         TO = self.To
#         #mail_reciepients = self.To + self.Cc.split(',')
#         #print("Reciepients",mail_reciepients)
#         try:
#             id = self.data['id']
#             User = self.data['User']
#             WWID = self.data['WWID']
#             message = self.data['message']
#             program = self.data['program']
#             sku = self.data['sku']
#             labname = self.data['lab_name']
#             vendor = self.data['vendor']
#             allocatedto = self.data['allocatedto']
#             notifyto = self.data['notifyto']
#             fromww = str(self.data['fromww'])[0:2] + '-' + str(self.data['fromww'])[2:]
#             toww = str(self.data['toww'])[0:2] + '-' + str(self.data['toww'])[2:]
#             duration = self.data['duration']
#             remarks = self.data['remarks']
#             team = self.data['team']
#             number_of_benches = self.data['numberofbenches']
#             bench_data = ",".join(self.data['bench_data'])
#             final_message = Bench_Expiry_html_text.format(LabName=labname, User=User,WWID=WWID,message=message,program_name=program,sku=sku,
#                                  lab_name=labname,vendor_name=vendor,allocatedto=allocatedto,
#                                  from_ww=fromww,to_ww=toww,remarks=remarks,duration=duration,number_of_benches=number_of_benches,
#                                  bench_data=bench_data,team=team,id=id,notifyto=notifyto)
#             SendEmail(From ,TO, CC, Subject, final_message)
#         except Exception as e:
#             print(e)
#             print(traceback.format_exc())
#             print("Error Unable to send mail")